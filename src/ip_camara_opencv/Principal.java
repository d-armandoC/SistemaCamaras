package ip_camara_opencv;

import static com.googlecode.javacv.cpp.opencv_objdetect.*;
import com.googlecode.javacv.cpp.opencv_objdetect.CvHaarClassifierCascade;
import com.googlecode.javacpp.Loader;
import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.cpp.opencv_core;
import static com.googlecode.javacv.cpp.opencv_core.*;
import com.googlecode.javacv.cpp.opencv_core.CvContour;
import com.googlecode.javacv.cpp.opencv_core.CvMemStorage;
import com.googlecode.javacv.cpp.opencv_core.CvPoint;
import com.googlecode.javacv.cpp.opencv_core.CvRect;
import com.googlecode.javacv.cpp.opencv_core.CvScalar;
import com.googlecode.javacv.cpp.opencv_core.CvSeq;
import static com.googlecode.javacv.cpp.opencv_core.IPL_DEPTH_8U;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
import static com.googlecode.javacv.cpp.opencv_core.cvCreateImage;
import static com.googlecode.javacv.cpp.opencv_core.cvGetSize;
import static com.googlecode.javacv.cpp.opencv_core.cvInRangeS;
import com.googlecode.javacv.cpp.opencv_highgui;
import static com.googlecode.javacv.cpp.opencv_core.cvScalar;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_MEDIAN;
import static com.googlecode.javacv.cpp.opencv_imgproc.cvSmooth;
import static com.googlecode.javacv.cpp.opencv_highgui.*;
import static com.googlecode.javacv.cpp.opencv_imgproc.*;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_GAUSSIAN;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_BGR2GRAY;
import static com.googlecode.javacv.cpp.opencv_core.cvScalar;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_BGR2GRAY;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_GAUSSIAN;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_MEDIAN;
import static com.googlecode.javacv.cpp.opencv_imgproc.cvCvtColor;
import static com.googlecode.javacv.cpp.opencv_imgproc.cvSmooth;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_THRESH_BINARY_INV;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_ADAPTIVE_THRESH_MEAN_C;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_RETR_CCOMP;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_CHAIN_APPROX_NONE;
//import static com.googlecode.javacv.cpp.opencv_imgproc.CV_FILLED;
import java.awt.Color;
import static com.googlecode.javacv.cpp.opencv_imgproc.cvBoundingRect;
import java.awt.Canvas;
import java.awt.Image;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JList;
import org.omg.CORBA.Environment;

public class Principal extends javax.swing.JFrame {
    IplImage grabbedImage = null;
    IplImage originalImage1 = null;
    int numero_img = 0;
    boolean guardar = false;
      String hora;
      CvFont font;
  DefaultListModel listModel = new DefaultListModel();
  String hora1="";
        String fecha1="";
        GregorianCalendar gcHora1 = new GregorianCalendar();
	
    public Principal() {
        initComponents();
        jtxttiempo.setText(""+5);
        Thread hilo = new Thread() {
            public void run() {
             //   CvCapture capture = opencv_highgui.cvCreateCameraCapture(0);
              CvCapture capture = opencv_highgui.cvCreateFileCapture("rtsp://admin:12345@192.168.10.150:554//Streaming/Channels/1");
                opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_HEIGHT, 300);
                opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_WIDTH, 200);
                grabbedImage = opencv_highgui.cvQueryFrame(capture);
                while ((grabbedImage = opencv_highgui.cvQueryFrame(capture)) != null) {
                }
            }
        };
        hilo.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */ //cmara de la lap..
    @SuppressWarnings("unchecked")
    private void guardar() throws InterruptedException {
       // IplImage gris = cvCreateImage(cvGetSize(imagen), IPL_DEPTH_8U, 1);//se crea la imagen para guardar los fotogramas para guardar de la camara 
       int tiempo=0;
       
            while((tiempo<(Integer.parseInt(jtxttiempo.getText())*1000))&&(guardar==true)){
             GregorianCalendar gcHora = new GregorianCalendar();
            hora = gcHora.get(Calendar.YEAR)+"_"
                    + gcHora.get(Calendar.MONTH)+"_"
                    + gcHora.get(Calendar.DATE)+"_"
                    + gcHora.get(Calendar.HOUR) + "_"
                    + gcHora.get(Calendar.MINUTE) + "_"
                    + gcHora.get(Calendar.SECOND) + "_"
                    + gcHora.get(Calendar.MILLISECOND) + "_";
            if (gcHora.get(Calendar.AM_PM) == 0) {                                                                                      //retorno de calendar.AM_PM
                hora = hora + "am";
            } else {
                hora = hora + "pm";
            }
            cvSaveImage("C:\\Users\\fabricio\\Desktop\\frames\\" + hora + ".jpg", grabbedImage);
            listModel.addElement(hora+".jpg");
            jlistanombres.setModel(listModel);
            Thread.sleep(100);
            tiempo=tiempo+100;
            System.out.println(tiempo);
           
        }
            System.out.println(guardar);
             this.guardar=false;
             jbtncapturar.setText("CAPTURAR");
             jbtncapturar.repaint();
     
   }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brniniciar = new javax.swing.JButton();
        jbtncapturar = new javax.swing.JButton();
        jlimg = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistanombres = new javax.swing.JList();
        btnver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtxttiempo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        brniniciar.setText("INICIAR");
        brniniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brniniciarActionPerformed(evt);
            }
        });

        jbtncapturar.setText("CAPTURAR");
        jbtncapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtncapturarActionPerformed(evt);
            }
        });

        jlistanombres.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jlistanombres);

        btnver.setText("VER");
        btnver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnverActionPerformed(evt);
            }
        });

        jLabel1.setText("tiempo de captura:");

        jtxttiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxttiempoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(brniniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtncapturar, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jtxttiempo))
                .addGap(18, 18, 18)
                .addComponent(jlimg, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnver, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(brniniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtncapturar)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxttiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnver)))
                .addContainerGap(88, Short.MAX_VALUE))
            .addComponent(jlimg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static CvScalar min = cvScalar(0, 15, 5, 0);//BGR-A
    static CvScalar max = cvScalar(137, 22, 10, 0);//BGR-A

   
    private void brniniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brniniciarActionPerformed

        
        Thread hilo;
        hilo = new Thread() {
            public void run() {
                
                
                //CanvasFrame frame = new CanvasFrame("WebCam");
                Canvas frame2 = new Canvas();
                
                while (grabbedImage != null) {
                    
                    hora1= gcHora1.get(Calendar.HOUR)+":"+ gcHora1.get(Calendar.MINUTE) + ":"
                            + gcHora1.get(Calendar.SECOND) + ":"
                            + gcHora1.get(Calendar.MILLISECOND);
                    
                    fecha1 = gcHora1.get(Calendar.YEAR)+ "/"
                            + gcHora1.get(Calendar.MONTH)+"/"
                            + gcHora1.get(Calendar.DATE);
                    
                    if (gcHora1.get(Calendar.AM_PM) == 0) {                                                                                      //retorno de calendar.AM_PM
                        hora1 = hora1 + " am";
                    } else {
                        hora1 = hora1 + " pm";
                    }
                    
                    CvFont font1=new CvFont(20);
                    cvInitFont(font1, 5, 6.9, 1.0, 1.3, 3, 10);
                    
                    //   cvInitFont(font, CV_FONT_HERSHEY_SIMPLEX, 0.1, 0.1, 0.1, 1, 1);
                    cvPutText(grabbedImage, hora1+" "+fecha1, cvPoint(10, 70), font1, CvScalar.BLACK);
                    //    cvPutText(origImg,"male",cvPoint(100,200),font,CvScalar.BLUE);
                    //      IplImage nueva=escalarGrises(grabbedImage);
                    //   frame.showImage(escalarGrises(grabbedImage));
                     // jlimg.setIcon(new ImageIcon(grabbedImage.getBufferedImage()));
                      ImageIcon imagen= new ImageIcon(grabbedImage.getBufferedImage());

                      ImageIcon fot =  new ImageIcon(grabbedImage.getBufferedImage());
Icon icono = new ImageIcon(fot.getImage().getScaledInstance(jlimg.getWidth(), jlimg.getHeight(), Image.SCALE_DEFAULT));
jlimg.setIcon(icono);

                                       try {
                        Thread.sleep(50);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        hilo.start();


    }//GEN-LAST:event_brniniciarActionPerformed
    private void jbtncapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtncapturarActionPerformed
        if (this.guardar) {
            this.guardar = false;
        //    jbtncapturar.setText("CAPTURAR");
        } else {
            this.guardar = true;
            try {
            this.guardar();
        } catch (InterruptedException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
          //  jbtncapturar.setText("DETENER CAPTURA");
            
        }
        
    }//GEN-LAST:event_jbtncapturarActionPerformed

    private void btnverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnverActionPerformed
     new Visor((String) jlistanombres.getSelectedValue()).setVisible(true);
    }//GEN-LAST:event_btnverActionPerformed

    private void jtxttiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxttiempoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxttiempoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brniniciar;
    private javax.swing.JButton btnver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtncapturar;
    private javax.swing.JLabel jlimg;
    private javax.swing.JList jlistanombres;
    private javax.swing.JTextField jtxttiempo;
    // End of variables declaration//GEN-END:variables
}
